"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3397],{89573:(o,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>d,default:()=>L,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var t=n(58168),i=(n(96540),n(15680)),r=n(27450),c=(n(51597),n(86315),n(72584));n(54757);const s={title:"List.AccordionGroup"},d=void 0,p={unversionedId:"components/List/ListAccordionGroup",id:"components/List/ListAccordionGroup",title:"List.AccordionGroup",description:"List.AccordionGroup allows to control a group of List Accordions. id prop for List.Accordion is required in order for group to work.",source:"@site/docs/components/List/ListAccordionGroup.mdx",sourceDirName:"components/List",slug:"/components/List/ListAccordionGroup",permalink:"/react-native-paper/docs/components/List/ListAccordionGroup",draft:!1,editUrl:"https://github.com/callstack/react-native-paper/tree/main/src/components/List/ListAccordionGroup.tsx",tags:[],version:"current",frontMatter:{title:"List.AccordionGroup"},sidebar:"components",previous:{title:"List.Accordion",permalink:"/react-native-paper/docs/components/List/ListAccordion"},next:{title:"List.Icon",permalink:"/react-native-paper/docs/components/List/ListIcon"}},a={},l=[{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2},{value:"onAccordionPress",id:"onaccordionpress",level:3},{value:"expandedId",id:"expandedid",level:3},{value:"children (required)",id:"children-required",level:3}],u={toc:l},m="wrapper";function L(o){let{components:e,...n}=o;return(0,i.yg)(m,(0,t.A)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"List.AccordionGroup allows to control a group of List Accordions. ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," prop for List.Accordion is required in order for group to work.\nList.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\nAt most one Accordion can be expanded at a given time."),(0,i.yg)(c.A,{screenshotData:"screenshots/list-accordion-group.png",baseUrl:"/react-native-paper/",mdxType:"ScreenshotTabs"}),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'import * as React from \'react\';\nimport { View, Text } from \'react-native\';\nimport { List } from \'react-native-paper\';\n\nconst MyComponent = () => (\n  <List.AccordionGroup>\n    <List.Accordion title="Accordion 1" id="1">\n      <List.Item title="Item 1" />\n    </List.Accordion>\n    <List.Accordion title="Accordion 2" id="2">\n      <List.Item title="Item 2" />\n    </List.Accordion>\n    <View>\n      <Text>\n        List.Accordion can be wrapped because implementation uses React.Context.\n      </Text>\n      <List.Accordion title="Accordion 3" id="3">\n        <List.Item title="Item 3" />\n      </List.Accordion>\n    </View>\n  </List.AccordionGroup>\n);\n\nexport default MyComponent;\n')),(0,i.yg)("h2",{id:"props"},"Props"),(0,i.yg)("span",null),(0,i.yg)("div",null,(0,i.yg)("h3",{id:"onaccordionpress"},"onAccordionPress")),(0,i.yg)(r.A,{componentLink:"List/ListAccordionGroup",prop:"onAccordionPress",mdxType:"PropTable"}),(0,i.yg)("div",null,(0,i.yg)("h3",{id:"expandedid"},"expandedId")),(0,i.yg)(r.A,{componentLink:"List/ListAccordionGroup",prop:"expandedId",mdxType:"PropTable"}),(0,i.yg)("div",null,(0,i.yg)("h3",{id:"children-required"},"children (required)")),(0,i.yg)(r.A,{componentLink:"List/ListAccordionGroup",prop:"children",mdxType:"PropTable"}),(0,i.yg)("span",null),(0,i.yg)("span",null),(0,i.yg)("span",null))}L.isMDXComponent=!0}}]);